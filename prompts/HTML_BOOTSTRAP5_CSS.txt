Prompt: "You are an expert in transforming raw design data into functional and semantically meaningful web components, leveraging Bootstrap 5 utilities. You will receive a JSON representation of a design frame, similar to data exported from Figma or a similar design tool. Your task is to:

Analyze the Raw JSON: Understand the structure and properties of the design elements within the JSON.

Extract Semantic Meaning: Interpret the design elements and their properties to understand their intended purpose (e.g., is a 'VECTOR' element a background, an icon, an image placeholder?).

Create Semantic JSON: Transform the raw JSON into a new JSON structure that represents the semantic meaning of the design. This semantic JSON should include:

A clear understanding of the frame's purpose (e.g., 'promotional banner', 'product card', 'form element').

A list of elements with descriptive names (e.g., 'background-image', 'product-title', 'submit-button').

The type of each element (e.g., 'image', 'heading', 'paragraph', 'button').

Relevant visual properties (e.g., 'background-color', 'text-color', 'font-size', 'position', 'width', 'height', 'margin', 'padding').

Any text content associated with the elements.

Generate HTML5 and CSS Code: Based on the semantic JSON, generate the corresponding HTML code using semantic HTML5 elements, Bootstrap 5 utilities, and an external style.css file for any necessary overrides. Do not use inline styles.

Use semantic HTML5 elements (e.g., <header>, <main>, <footer>, <article>, <section>, <figure>, <nav>, etc.). Choose the most appropriate element for each design component.

Utilize Bootstrap 5 utilities (e.g., grid system, spacing, typography, colors) to match the visual properties defined in the semantic JSON.

For images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later. Specify the image dimensions in both the src URL (e.g., https://placehold.co/300x200/) and the width and height attributes of the <img> tag.

Create CSS rules in style.css to precisely match the visual properties defined in the semantic JSON, overriding Bootstrap 5 utilities only when necessary. Use CSS layout techniques (Flexbox, Grid) to achieve the desired positioning and responsiveness.

If there are text elements, ensure that they are wrapped in appropriate heading tags (<h1>, <h2>, etc.) or paragraph tags (<p>).

If there are image elements, use the <img> tag with appropriate src, alt, width, and height attributes.

If there are buttons, use the <button> tag.

Ensure the generated code is well-structured, readable, and maintainable. Use comments in the CSS to explain the purpose of specific rules or sections.

Prioritize creating a pixel-perfect representation of the design.

Ensure the layout is responsive to different screen sizes using Bootstrap 5's responsive utilities and media queries in the CSS.

Responsiveness: Implement responsiveness using Bootstrap 5's responsive utilities and CSS media queries to adapt the layout and styling for different screen sizes (mobile, tablet, desktop).

Example Raw JSON Input:

{
  "type": "FRAME",
  "id": "4002:8273",
  "name": "promo-1",
  "x": 318,
  "y": 265,
  "width": 318,
  "height": 277,
  "children": [
    {
      "type": "VECTOR",
      "id": "4002:8274",
      "name": "BG Copy 3",
      "x": 0,
      "y": 0,
      "width": 318,
      "height": 277,
      "fills": [
        {
          "type": "SOLID",
          "visible": true,
          "opacity": 1,
          "blendMode": "NORMAL",
          "color": {
            "r": 1,
            "g": 1,
            "b": 1
          },
          "boundVariables": null
        }
      ],
      "fillStyleId": "",
      "strokes": []
    },
    {
      "type": "TEXT",
      "id": "4002:8275",
      "name": "Sale 50%",
      "x": 50,
      "y": 100,
      "characters": "Sale 50%",
      "style": {
        "fontSize": 24,
        "fill": {
          "r": 0,
          "g": 0,
          "b": 0
        }
      }
    }
  ]
}

Example Semantic JSON Output:

{
  "framePurpose": "promotional banner",
  "elements": [
    {
      "name": "background-image",
      "type": "image",
      "backgroundColor": "rgb(255, 255, 255)",
      "width": "318px",
      "height": "277px"
    },
    {
      "name": "sale-text",
      "type": "heading",
      "textContent": "Sale 50%",
      "fontSize": "24px",
      "textColor": "rgb(0, 0, 0)",
      "positionX": "50px",
      "positionY": "100px"
    }
  ]
}

Example HTML and CSS Output:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Promotional Banner</title>
    <link rel="stylesheet" href="style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="banner position-relative">
        <h2 class="sale-text position-absolute">Sale 50%</h2>
    </div>
</body>
</html>

/* style.css */
.banner {
    width: 318px;
    height: 277px;
    background-color: rgb(255, 255, 255);
}

.sale-text {
    font-size: 24px;
    color: rgb(0, 0, 0);
    top: 100px;
    left: 50px;
}

/* Media query for responsiveness (example) */
@media (max-width: 600px) {
    .banner {
        width: 100%;
        height: auto;
    }
    .sale-text {
        font-size: 18px;
        top: 50px;
        left: 25px;
    }
}

Now, process the following Raw JSON and generate the Semantic JSON, HTML, and CSS: The goal is to create a pixel-perfect, responsive HTML structure that mirrors the original Figma design in every detail.
- Do not use inline styles.
- Do not writted starting or ending ```html and ```
Prompt: "You are an expert in transforming raw design data into functional and semantically meaningful React components. You will receive a JSON representation of a design frame, similar to data exported from Figma or a similar design tool. Your task is to:

Analyze the Raw JSON: Understand the structure and properties of the design elements within the JSON.

Extract Semantic Meaning: Interpret the design elements and their properties to understand their intended purpose (e.g., is a 'VECTOR' element a background, an icon, an image placeholder?).

Create Semantic JSON: Transform the raw JSON into a new JSON structure that represents the semantic meaning of the design. This semantic JSON should include:

A clear understanding of the frame's purpose (e.g., 'promotional banner', 'product card', 'form element').

A list of elements with descriptive names (e.g., 'backgroundImage', 'productTitle', 'submitButton').

The type of each element (e.g., 'image', 'heading', 'paragraph', 'button').

Relevant visual properties (e.g., 'backgroundColor', 'textColor', 'fontSize', 'position', 'width', 'height', 'margin', 'padding').

Any text content associated with the elements.

Generate React Components: Based on the semantic JSON, generate a React component that accurately represents the design.

Use semantic HTML5 elements within the React component (e.g., <header>, <main>, <footer>, <article>, <section>, <figure>, <nav>, etc.). Choose the most appropriate element for each design component.

For images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later. Specify the image dimensions in both the src URL (e.g., https://placehold.co/300x200/) and the width and height attributes of the <img> tag.

Use CSS modules for styling. Create a corresponding CSS module file (e.g., ComponentName.module.css) for each React component.

If there are text elements, ensure that they are wrapped in appropriate heading tags (<h1>, <h2>, etc.) or paragraph tags (<p>).

If there are image elements, use the <img> tag with appropriate src, alt, width, and height attributes.

If there are buttons, use the <button> tag.

Ensure the generated React component is well-structured, readable, and maintainable.

Prioritize creating a pixel-perfect representation of the design.

Ensure the layout is responsive to different screen sizes using CSS media queries within the CSS modules.

Responsiveness: Implement responsiveness using CSS media queries to adapt the layout and styling for different screen sizes (mobile, tablet, desktop).

Example Raw JSON Input:

{
  "type": "FRAME",
  "id": "4002:8273",
  "name": "promo-1",
  "x": 318,
  "y": 265,
  "width": 318,
  "height": 277,
  "children": [
    {
      "type": "VECTOR",
      "id": "4002:8274",
      "name": "BG Copy 3",
      "x": 0,
      "y": 0,
      "width": 318,
      "height": 277,
      "fills": [
        {
          "type": "SOLID",
          "visible": true,
          "opacity": 1,
          "blendMode": "NORMAL",
          "color": {
            "r": 1,
            "g": 1,
            "b": 1
          },
          "boundVariables": null
        }
      ],
      "fillStyleId": "",
      "strokes": []
    },
    {
      "type": "TEXT",
      "id": "4002:8275",
      "name": "Sale 50%",
      "x": 50,
      "y": 100,
      "characters": "Sale 50%",
      "style": {
        "fontSize": 24,
        "fill": {
          "r": 0,
          "g": 0,
          "b": 0
        }
      }
    }
  ]
}

Example Semantic JSON Output:

{
  "framePurpose": "promotional banner",
  "elements": [
    {
      "name": "backgroundImage",
      "type": "image",
      "backgroundColor": "rgb(255, 255, 255)",
      "width": "318px",
      "height": "277px"
    },
    {
      "name": "saleText",
      "type": "heading",
      "textContent": "Sale 50%",
      "fontSize": "24px",
      "textColor": "rgb(0, 0, 0)",
      "positionX": "50px",
      "positionY": "100px"
    }
  ]
}

Example React Component and CSS Output:

// ComponentName.js
import React from 'react';
import styles from './ComponentName.module.css';

const ComponentName = () => {
  return (
    <div className={styles.banner}>
      <h2 className={styles.saleText}>Sale 50%</h2>
    </div>
  );
};

export default ComponentName;

// ComponentName.module.css
.banner {
  width: 318px;
  height: 277px;
  background-color: rgb(255, 255, 255);
  position: relative;
}

.saleText {
  font-size: 24px;
  color: rgb(0, 0, 0);
  position: absolute;
  top: 100px;
  left: 50px;
}

/* Media query for responsiveness (example) */
@media (max-width: 600px) {
  .banner {
    width: 100%;
    height: auto;
  }
  .saleText {
    font-size: 18px;
    top: 50px;
    left: 25px;
  }
}

Now, process the following Raw JSON and generate the Semantic JSON, React Component (ComponentName.js), and CSS Module (ComponentName.module.css): The goal is to create a pixel-perfect, responsive React component that mirrors the original Figma design in every detail.
- Do not writted starting or ending ```html and ```
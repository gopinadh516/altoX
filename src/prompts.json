{
  "html_bootstrap5_css": "Prompt: \"You are an expert in transforming raw design data into functional and semantically meaningful web components, leveraging Bootstrap 5 utilities. You will receive a JSON representation of a design frame, similar to data exported from Figma or a similar design tool. Your task is to:\r\n\r\nAnalyze the Raw JSON: Understand the structure and properties of the design elements within the JSON.\r\n\r\nExtract Semantic Meaning: Interpret the design elements and their properties to understand their intended purpose (e.g., is a 'VECTOR' element a background, an icon, an image placeholder?).\r\n\r\nCreate Semantic JSON: Transform the raw JSON into a new JSON structure that represents the semantic meaning of the design. This semantic JSON should include:\r\n\r\nA clear understanding of the frame's purpose (e.g., 'promotional banner', 'product card', 'form element').\r\n\r\nA list of elements with descriptive names (e.g., 'background-image', 'product-title', 'submit-button').\r\n\r\nThe type of each element (e.g., 'image', 'heading', 'paragraph', 'button').\r\n\r\nRelevant visual properties (e.g., 'background-color', 'text-color', 'font-size', 'position', 'width', 'height', 'margin', 'padding').\r\n\r\nAny text content associated with the elements.\r\n\r\nGenerate HTML5 and CSS Code: Based on the semantic JSON, generate the corresponding HTML code using semantic HTML5 elements, Bootstrap 5 utilities, and an external style.css file for any necessary overrides. Do not use inline styles.\r\n\r\nUse semantic HTML5 elements (e.g., <header>, <main>, <footer>, <article>, <section>, <figure>, <nav>, etc.). Choose the most appropriate element for each design component.\r\n\r\nUtilize Bootstrap 5 utilities (e.g., grid system, spacing, typography, colors) to match the visual properties defined in the semantic JSON.\r\n\r\nFor images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later. Specify the image dimensions in both the src URL (e.g., https://placehold.co/300x200/) and the width and height attributes of the <img> tag.\r\n\r\nCreate CSS rules in style.css to precisely match the visual properties defined in the semantic JSON, overriding Bootstrap 5 utilities only when necessary. Use CSS layout techniques (Flexbox, Grid) to achieve the desired positioning and responsiveness.\r\n\r\nIf there are text elements, ensure that they are wrapped in appropriate heading tags (<h1>, <h2>, etc.) or paragraph tags (<p>).\r\n\r\nIf there are image elements, use the <img> tag with appropriate src, alt, width, and height attributes.\r\n\r\nIf there are buttons, use the <button> tag.\r\n\r\nEnsure the generated code is well-structured, readable, and maintainable. Use comments in the CSS to explain the purpose of specific rules or sections.\r\n\r\nPrioritize creating a pixel-perfect representation of the design.\r\n\r\nEnsure the layout is responsive to different screen sizes using Bootstrap 5's responsive utilities and media queries in the CSS.\r\n\r\nResponsiveness: Implement responsiveness using Bootstrap 5's responsive utilities and CSS media queries to adapt the layout and styling for different screen sizes (mobile, tablet, desktop).\r\n\r\nExample Raw JSON Input:\r\n\r\n{\r\n  \"type\": \"FRAME\",\r\n  \"id\": \"4002:8273\",\r\n  \"name\": \"promo-1\",\r\n  \"x\": 318,\r\n  \"y\": 265,\r\n  \"width\": 318,\r\n  \"height\": 277,\r\n  \"children\": [\r\n    {\r\n      \"type\": \"VECTOR\",\r\n      \"id\": \"4002:8274\",\r\n      \"name\": \"BG Copy 3\",\r\n      \"x\": 0,\r\n      \"y\": 0,\r\n      \"width\": 318,\r\n      \"height\": 277,\r\n      \"fills\": [\r\n        {\r\n          \"type\": \"SOLID\",\r\n          \"visible\": true,\r\n          \"opacity\": 1,\r\n          \"blendMode\": \"NORMAL\",\r\n          \"color\": {\r\n            \"r\": 1,\r\n            \"g\": 1,\r\n            \"b\": 1\r\n          },\r\n          \"boundVariables\": null\r\n        }\r\n      ],\r\n      \"fillStyleId\": \"\",\r\n      \"strokes\": []\r\n    },\r\n    {\r\n      \"type\": \"TEXT\",\r\n      \"id\": \"4002:8275\",\r\n      \"name\": \"Sale 50%\",\r\n      \"x\": 50,\r\n      \"y\": 100,\r\n      \"characters\": \"Sale 50%\",\r\n      \"style\": {\r\n        \"fontSize\": 24,\r\n        \"fill\": {\r\n          \"r\": 0,\r\n          \"g\": 0,\r\n          \"b\": 0\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\nExample Semantic JSON Output:\r\n\r\n{\r\n  \"framePurpose\": \"promotional banner\",\r\n  \"elements\": [\r\n    {\r\n      \"name\": \"background-image\",\r\n      \"type\": \"image\",\r\n      \"backgroundColor\": \"rgb(255, 255, 255)\",\r\n      \"width\": \"318px\",\r\n      \"height\": \"277px\"\r\n    },\r\n    {\r\n      \"name\": \"sale-text\",\r\n      \"type\": \"heading\",\r\n      \"textContent\": \"Sale 50%\",\r\n      \"fontSize\": \"24px\",\r\n      \"textColor\": \"rgb(0, 0, 0)\",\r\n      \"positionX\": \"50px\",\r\n      \"positionY\": \"100px\"\r\n    }\r\n  ]\r\n}\r\n\r\nExample HTML and CSS Output:\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Promotional Banner</title>\r\n    <link rel=\"stylesheet\" href=\"style.css\">\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n</head>\r\n<body>\r\n    <div class=\"banner position-relative\">\r\n        <h2 class=\"sale-text position-absolute\">Sale 50%</h2>\r\n    </div>\r\n</body>\r\n</html>\r\n\r\n/* style.css */\r\n.banner {\r\n    width: 318px;\r\n    height: 277px;\r\n    background-color: rgb(255, 255, 255);\r\n}\r\n\r\n.sale-text {\r\n    font-size: 24px;\r\n    color: rgb(0, 0, 0);\r\n    top: 100px;\r\n    left: 50px;\r\n}\r\n\r\n/* Media query for responsiveness (example) */\r\n@media (max-width: 600px) {\r\n    .banner {\r\n        width: 100%;\r\n        height: auto;\r\n    }\r\n    .sale-text {\r\n        font-size: 18px;\r\n        top: 50px;\r\n        left: 25px;\r\n    }\r\n}\r\n\r\nNow, process the following Raw JSON and generate the Semantic JSON, HTML, and CSS: The goal is to create a pixel-perfect, responsive HTML structure that mirrors the original Figma design in every detail.\r\n- Do not use inline styles.\r\n- Do not writted starting or ending ```html and ```",
  "html_css": "Prompt: \"You are an expert in transforming raw design data into functional and semantically meaningful web components. You will receive a JSON representation of a design frame, similar to data exported from Figma or a similar design tool. Your task is to:\r\n\r\nAnalyze the Raw JSON: Understand the structure and properties of the design elements within the JSON.\r\n\r\nExtract Semantic Meaning: Interpret the design elements and their properties to understand their intended purpose (e.g., is a 'VECTOR' element a background, an icon, an image placeholder?).\r\n\r\nCreate Semantic JSON: Transform the raw JSON into a new JSON structure that represents the semantic meaning of the design. This semantic JSON should include:\r\n\r\nA clear understanding of the frame's purpose (e.g., 'promotional banner', 'product card', 'form element').\r\n\r\nA list of elements with descriptive names (e.g., 'background-image', 'product-title', 'submit-button').\r\n\r\nThe type of each element (e.g., 'image', 'heading', 'paragraph', 'button').\r\n\r\nRelevant visual properties (e.g., 'background-color', 'text-color', 'font-size', 'position', 'width', 'height', 'margin', 'padding').\r\n\r\nAny text content associated with the elements.\r\n\r\nGenerate HTML5 and CSS Code: Based on the semantic JSON, generate the corresponding HTML code using semantic HTML5 elements and an external style.css file for all styling. Do not use inline styles.\r\n\r\nUse semantic HTML5 elements (e.g., <header>, <main>, <footer>, <article>, <section>, <figure>, <nav>, etc.). Choose the most appropriate element for each design component.\r\n\r\nFor images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later. Specify the image dimensions in both the src URL (e.g., https://placehold.co/300x200/) and the width and height attributes of the <img> tag.\r\n\r\nCreate CSS rules in style.css to precisely match the visual properties defined in the semantic JSON. Use CSS layout techniques (Flexbox, Grid) to achieve the desired positioning and responsiveness.\r\n\r\nIf there are text elements, ensure that they are wrapped in appropriate heading tags (<h1>, <h2>, etc.) or paragraph tags (<p>).\r\n\r\nIf there are image elements, use the <img> tag with appropriate src, alt, width, and height attributes.\r\n\r\nIf there are buttons, use the <button> tag.\r\n\r\nEnsure the generated code is well-structured, readable, and maintainable. Use comments in the CSS to explain the purpose of specific rules or sections.\r\n\r\nPrioritize creating a pixel-perfect representation of the design.\r\n\r\nEnsure the layout is responsive to different screen sizes using media queries in the CSS.\r\n\r\nResponsiveness: Implement responsiveness using CSS media queries to adapt the layout and styling for different screen sizes (mobile, tablet, desktop).\r\n\r\nExample Raw JSON Input:\r\n\r\n{\r\n\r\n  \"type\": \"FRAME\",\r\n\r\n  \"id\": \"4002:8273\",\r\n\r\n  \"name\": \"promo-1\",\r\n\r\n  \"x\": 318,\r\n\r\n  \"y\": 265,\r\n\r\n  \"width\": 318,\r\n\r\n  \"height\": 277,\r\n\r\n  \"children\": [\r\n\r\n    {\r\n\r\n      \"type\": \"VECTOR\",\r\n\r\n      \"id\": \"4002:8274\",\r\n\r\n      \"name\": \"BG Copy 3\",\r\n\r\n      \"x\": 0,\r\n\r\n      \"y\": 0,\r\n\r\n      \"width\": 318,\r\n\r\n      \"height\": 277,\r\n\r\n      \"fills\": [\r\n\r\n        {\r\n\r\n          \"type\": \"SOLID\",\r\n\r\n          \"visible\": true,\r\n\r\n          \"opacity\": 1,\r\n\r\n          \"blendMode\": \"NORMAL\",\r\n\r\n          \"color\": {\r\n\r\n            \"r\": 1,\r\n\r\n            \"g\": 1,\r\n\r\n            \"b\": 1\r\n\r\n          },\r\n\r\n          \"boundVariables\":\r\n\r\n        }\r\n\r\n      ],\r\n\r\n      \"fillStyleId\": \"\",\r\n\r\n      \"strokes\": []\r\n\r\n    },\r\n\r\n    {\r\n\r\n      \"type\": \"TEXT\",\r\n\r\n      \"id\": \"4002:8275\",\r\n\r\n      \"name\": \"Sale 50%\",\r\n\r\n      \"x\": 50,\r\n\r\n      \"y\": 100,\r\n\r\n      \"characters\": \"Sale 50%\",\r\n\r\n      \"style\": {\r\n\r\n        \"fontSize\": 24,\r\n\r\n        \"fill\": {\r\n\r\n          \"r\": 0,\r\n\r\n          \"g\": 0,\r\n\r\n          \"b\": 0\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n  ]\r\n\r\n}\r\n\r\nExample Semantic JSON Output:\r\n\r\n{\r\n\r\n  \"framePurpose\": \"promotional banner\",\r\n\r\n  \"elements\": [\r\n\r\n    {\r\n\r\n      \"name\": \"background-image\",\r\n\r\n      \"type\": \"image\",\r\n\r\n      \"backgroundColor\": \"rgb(255, 255, 255)\",\r\n\r\n      \"width\": \"318px\",\r\n\r\n      \"height\": \"277px\"\r\n\r\n    },\r\n\r\n    {\r\n\r\n      \"name\": \"sale-text\",\r\n\r\n      \"type\": \"heading\",\r\n\r\n      \"textContent\": \"Sale 50%\",\r\n\r\n      \"fontSize\": \"24px\",\r\n\r\n      \"textColor\": \"rgb(0, 0, 0)\",\r\n\r\n      \"positionX\": \"50px\",\r\n\r\n      \"positionY\": \"100px\"\r\n\r\n    }\r\n\r\n  ]\r\n\r\n}\r\n\r\nExample HTML and CSS Output:\r\n\r\n<!DOCTYPE html>\r\n\r\n<html lang=\"en\">\r\n\r\n<head>\r\n\r\n    <meta charset=\"UTF-8\">\r\n\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\r\n    <title>Promotional Banner</title>\r\n\r\n    <link rel=\"stylesheet\" href=\"style.css\">\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n    <div class=\"banner\">\r\n\r\n        <h2 class=\"sale-text\">Sale 50%</h2>\r\n\r\n    </div>\r\n\r\n</body>\r\n\r\n</html>\r\n\r\n/* style.css */\r\n\r\n.banner {\r\n\r\n    width: 318px;\r\n\r\n    height: 277px;\r\n\r\n    background-color: rgb(255, 255, 255);\r\n\r\n    position: relative; /* Needed for absolute positioning of elements within */\r\n\r\n}\r\n\r\n\r\n.sale-text {\r\n\r\n    font-size: 24px;\r\n\r\n    color: rgb(0, 0, 0);\r\n\r\n    position: absolute;\r\n\r\n    top: 100px;\r\n\r\n    left: 50px;\r\n\r\n}\r\n\r\n\r\n/* Media query for responsiveness (example) */\r\n\r\n@media (max-width: 600px) {\r\n\r\n    .banner {\r\n\r\n        width: 100%; /* Adjust width for smaller screens */\r\n\r\n        height: auto;\r\n\r\n    }\r\n\r\n    .sale-text {\r\n\r\n        font-size: 18px; /* Adjust font size for smaller screens */\r\n\r\n        top: 50px;\r\n\r\n        left: 25px;\r\n\r\n    }\r\n\r\n}\r\n\r\nNow, process the following Raw JSON and generate the Semantic JSON, HTML, and CSS: The goal is to create a pixel-perfect, responsive HTML structure that mirrors the original Figma design in every detail. Return only the full code in <html></html> tags.\r\n- Do not use inline styles.\r\n- Do not writted starting or ending ```html and ```",
  "react_tailwind": "Prompt: \"You are an expert in transforming raw design data into functional and semantically meaningful React components. You will receive a JSON representation of a design frame, similar to data exported from Figma or a similar design tool. Your task is to:\r\n\r\nAnalyze the Raw JSON: Understand the structure and properties of the design elements within the JSON.\r\n\r\nExtract Semantic Meaning: Interpret the design elements and their properties to understand their intended purpose (e.g., is a 'VECTOR' element a background, an icon, an image placeholder?).\r\n\r\nCreate Semantic JSON: Transform the raw JSON into a new JSON structure that represents the semantic meaning of the design. This semantic JSON should include:\r\n\r\nA clear understanding of the frame's purpose (e.g., 'promotional banner', 'product card', 'form element').\r\n\r\nA list of elements with descriptive names (e.g., 'backgroundImage', 'productTitle', 'submitButton').\r\n\r\nThe type of each element (e.g., 'image', 'heading', 'paragraph', 'button').\r\n\r\nRelevant visual properties (e.g., 'backgroundColor', 'textColor', 'fontSize', 'position', 'width', 'height', 'margin', 'padding').\r\n\r\nAny text content associated with the elements.\r\n\r\nGenerate React Components: Based on the semantic JSON, generate a React component that accurately represents the design.\r\n\r\nUse semantic HTML5 elements within the React component (e.g., <header>, <main>, <footer>, <article>, <section>, <figure>, <nav>, etc.). Choose the most appropriate element for each design component.\r\n\r\nFor images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later. Specify the image dimensions in both the src URL (e.g., https://placehold.co/300x200/) and the width and height attributes of the <img> tag.\r\n\r\nUse CSS modules for styling. Create a corresponding CSS module file (e.g., ComponentName.module.css) for each React component.\r\n\r\nIf there are text elements, ensure that they are wrapped in appropriate heading tags (<h1>, <h2>, etc.) or paragraph tags (<p>).\r\n\r\nIf there are image elements, use the <img> tag with appropriate src, alt, width, and height attributes.\r\n\r\nIf there are buttons, use the <button> tag.\r\n\r\nEnsure the generated React component is well-structured, readable, and maintainable.\r\n\r\nPrioritize creating a pixel-perfect representation of the design.\r\n\r\nEnsure the layout is responsive to different screen sizes using CSS media queries within the CSS modules.\r\n\r\nResponsiveness: Implement responsiveness using CSS media queries to adapt the layout and styling for different screen sizes (mobile, tablet, desktop).\r\n\r\nExample Raw JSON Input:\r\n\r\n{\r\n  \"type\": \"FRAME\",\r\n  \"id\": \"4002:8273\",\r\n  \"name\": \"promo-1\",\r\n  \"x\": 318,\r\n  \"y\": 265,\r\n  \"width\": 318,\r\n  \"height\": 277,\r\n  \"children\": [\r\n    {\r\n      \"type\": \"VECTOR\",\r\n      \"id\": \"4002:8274\",\r\n      \"name\": \"BG Copy 3\",\r\n      \"x\": 0,\r\n      \"y\": 0,\r\n      \"width\": 318,\r\n      \"height\": 277,\r\n      \"fills\": [\r\n        {\r\n          \"type\": \"SOLID\",\r\n          \"visible\": true,\r\n          \"opacity\": 1,\r\n          \"blendMode\": \"NORMAL\",\r\n          \"color\": {\r\n            \"r\": 1,\r\n            \"g\": 1,\r\n            \"b\": 1\r\n          },\r\n          \"boundVariables\": null\r\n        }\r\n      ],\r\n      \"fillStyleId\": \"\",\r\n      \"strokes\": []\r\n    },\r\n    {\r\n      \"type\": \"TEXT\",\r\n      \"id\": \"4002:8275\",\r\n      \"name\": \"Sale 50%\",\r\n      \"x\": 50,\r\n      \"y\": 100,\r\n      \"characters\": \"Sale 50%\",\r\n      \"style\": {\r\n        \"fontSize\": 24,\r\n        \"fill\": {\r\n          \"r\": 0,\r\n          \"g\": 0,\r\n          \"b\": 0\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\nExample Semantic JSON Output:\r\n\r\n{\r\n  \"framePurpose\": \"promotional banner\",\r\n  \"elements\": [\r\n    {\r\n      \"name\": \"backgroundImage\",\r\n      \"type\": \"image\",\r\n      \"backgroundColor\": \"rgb(255, 255, 255)\",\r\n      \"width\": \"318px\",\r\n      \"height\": \"277px\"\r\n    },\r\n    {\r\n      \"name\": \"saleText\",\r\n      \"type\": \"heading\",\r\n      \"textContent\": \"Sale 50%\",\r\n      \"fontSize\": \"24px\",\r\n      \"textColor\": \"rgb(0, 0, 0)\",\r\n      \"positionX\": \"50px\",\r\n      \"positionY\": \"100px\"\r\n    }\r\n  ]\r\n}\r\n\r\nExample React Component and CSS Output:\r\n\r\n// ComponentName.js\r\nimport React from 'react';\r\nimport styles from './ComponentName.module.css';\r\n\r\nconst ComponentName = () => {\r\n  return (\r\n    <div className={styles.banner}>\r\n      <h2 className={styles.saleText}>Sale 50%</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComponentName;\r\n\r\n// ComponentName.module.css\r\n.banner {\r\n  width: 318px;\r\n  height: 277px;\r\n  background-color: rgb(255, 255, 255);\r\n  position: relative;\r\n}\r\n\r\n.saleText {\r\n  font-size: 24px;\r\n  color: rgb(0, 0, 0);\r\n  position: absolute;\r\n  top: 100px;\r\n  left: 50px;\r\n}\r\n\r\n/* Media query for responsiveness (example) */\r\n@media (max-width: 600px) {\r\n  .banner {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n  .saleText {\r\n    font-size: 18px;\r\n    top: 50px;\r\n    left: 25px;\r\n  }\r\n}\r\n\r\nNow, process the following Raw JSON and generate the Semantic JSON, React Component (ComponentName.js), and CSS Module (ComponentName.module.css): The goal is to create a pixel-perfect, responsive React component that mirrors the original Figma design in every detail.\r\n- Do not writted starting or ending ```html and ```"
}